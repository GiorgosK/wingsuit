<?php
declare(strict_types=1);

use PHPUnit\Framework\TestCase;
use Wingsuit\RenderEngine\PatternStorage;
final class PatternTest extends TestCase
{

    private $storage;
    public function setUp(): void
    {
        $patterns_json = file_get_contents('tests/_data/wingsuit.patterns.json');
        $json = json_decode($patterns_json, true);
        $this->storage = PatternStorage::create($json['patterns']);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @dataProvider settingProvider
     */
    public function testGetSettings($variant, $overwrittenFields, $overwrittentSettings, $expected_settings): void
    {
        $id = 'test_button';
        $pattern = $this->storage->load($id, $variant, $overwrittenFields, $overwrittentSettings);
        $settings = $pattern ->getSettings();
        foreach ($expected_settings as $key => $value) {
            $this->assertEquals($value, $settings[$key], 'Setting ' . $key . ' should ' . $value . ' but is '. $settings[$key]);
        }
    }

    public function settingProvider()
    {
        return [
            ['', [], [], ['bg_color'=>'orange', 'bg_intensity' => '500', 'txt_color' => null]],
            ['invert', [], [], ['bg_color'=>'red', 'bg_intensity' => '500', 'txt_color' => "FAKER"]],
            ['', [], ['bg_color' => 'yellow'], ['bg_color'=>'yellow', 'bg_intensity' => '500', 'txt_color' => null]],
            ['invert', [], ['bg_color' => 'yellow'], ['bg_color'=>'yellow', 'bg_intensity' => '500', 'txt_color' => "FAKER"]],
        ];
    }

    /**
     * @dataProvider fieldProvider
     */
    public function testGetFields($variant, $overwrittenFields, $overwrittentSettings, $expected_fields): void
    {
        $id = 'test_button';

        $pattern = $this->storage->load($id, $variant, $overwrittenFields, $overwrittentSettings);
        $fields = $pattern ->getFields();
        foreach ($expected_fields as $key => $value) {
            $this->assertEquals($value, $fields[$key], 'Field ' . $key . ' should ' . $value . ' but is '. $fields[$key]);
        }
    }

    public function fieldProvider()
    {
        return [
            ['', [], [], ['button_content'=>'Demo Button', 'button_svg' => null, "button_faker" => "FAKER"]],
            ['invert', [], [], ['button_content'=>'FAKER', 'button_svg' => 'svg',  "button_faker" => "FAKER"]],
            ['', ['button_content' => 'Overwritten'], [], ['button_content'=>'Overwritten', 'button_svg' => null, "button_faker" => "FAKER"]],
            ['invert', ['button_content' => 'Overwritten'], [], ['button_content'=>'Overwritten', 'button_svg' => 'svg',  "button_faker" => "FAKER"]],
        ];
    }

    /**
     * @dataProvider patternProvider
     */
    public function testGetPatterns($variant, $overwrittenFields = [], $overwrittentSettings = [], $expected_patterns = []): void
    {
        $id = 'test_button';

        $pattern = $this->storage->load($id, $variant, $overwrittenFields, $overwrittentSettings);
        $patterns = $pattern->getPatterns();
        $this->assertEquals(count($expected_patterns), count($patterns));
        foreach ($expected_patterns  as $field_name => $expected_pattern) {
            $this->assertArrayHasKey($field_name, $patterns);
            $this->assertNotNull($patterns[$field_name]);
            $this->assertEquals($expected_pattern['id'], $patterns[$field_name]->id());
            $this->assertEquals($expected_pattern['variant'], $patterns[$field_name]->variant());
        }
        $this->assertNotNull($patterns);
    }

    public function patternProvider()
    {
        return [
            ['', [], [], ['button_icon'=> ['id' => 'svg_icon', 'variant' => '']]],
        ];
    }

}

